{"version":3,"sources":["constants/index.js","components/Register/index.js","components/RegisterButton/index.js","components/RegistersSelect/index.js","components/OperationButton/index.js","App.js","serviceWorker.js","index.js"],"names":["REGISTERS_INITIAL","name","value","Register","onChange","className","htmlFor","id","type","pattern","RegisterButton","isSelected","setter","onClick","classNames","RegistersSelect","registers","selected","map","key","OperationButton","App","useState","setRegisters","r1","setR1","r1Val","setR1Val","r2","setR2","r2Val","setR2Val","handleRegisterChange","e","target","item","COMMANDS","func","register","Number","parseInt","toString","useEffect","find","RegistersList","RegistersSwitch","event","getAttribute","Operations","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b48fc6a.chunk.js","sourcesContent":["export const REGISTERS_INITIAL = [\n  {\n    name: \"AX\",\n    value: 0,\n  },\n  {\n    name: \"BX\",\n    value: 0,\n  },\n  {\n    name: \"CX\",\n    value: 0,\n  },\n  {\n    name: \"DX\",\n    value: 0,\n  },\n];\n","import React from \"react\";\n\nconst Register = ({ name, value, onChange }) => (\n  <div className=\"md:flex md:items-center mb-6\">\n    <div>\n      <label\n        className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\"\n        htmlFor={name}\n      >\n        {name}\n      </label>\n    </div>\n    <div className=\"w-full\">\n      <input\n        className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-300\"\n        id={name}\n        type=\"text\"\n        pattern=\"[0-1]*\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  </div>\n);\n\nexport default Register;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst RegisterButton = ({ name, isSelected, setter }) => (\n  <span\n    name={name}\n    onClick={setter}\n    className={classNames(\"flex text-2xl font-bold p-1 cursor-pointer\", {\n      \"text-white bg-blue-300\": isSelected,\n      \"text-gray-500\": !isSelected,\n    })}\n  >\n    {name}\n  </span>\n);\n\nexport default RegisterButton;\n","import React from \"react\";\nimport RegisterButton from \"../RegisterButton\";\n\nconst RegistersSelect = ({ registers, selected, setter }) =>\n  registers.map(({ name }) => (\n    <RegisterButton\n      key={`btn-${name}`}\n      name={name}\n      isSelected={name === selected}\n      setter={setter}\n    />\n  ));\n\nexport default RegistersSelect;\n","import React from \"react\";\n\nconst OperationButton = ({ name, onClick }) => (\n  <button\n    className=\"flex w-32 justify-center items-center py-2 px-2 text-white text-xl font-bold bg-blue-300\"\n    type=\"button\"\n    onClick={onClick}\n  >\n    {name}\n  </button>\n);\n\nexport default OperationButton;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles/styles.output.css\";\nimport { REGISTERS_INITIAL } from \"./constants\";\nimport Register from \"./components/Register\";\nimport RegistersSelect from \"./components/RegistersSelect\";\nimport OperationButton from \"./components/OperationButton\";\n\nfunction App() {\n  const [registers, setRegisters] = useState(REGISTERS_INITIAL);\n\n  const [r1, setR1] = useState(registers[0].name);\n  const [r1Val, setR1Val] = useState(registers[0].value);\n\n  const [r2, setR2] = useState(registers[1].name);\n  const [r2Val, setR2Val] = useState(registers[1].value);\n\n  const handleRegisterChange = (e) => {\n    const { id, value } = e.target;\n    setRegisters(\n      registers.map((item) => (item.name === id ? { name: id, value } : item))\n    );\n  };\n\n  const mov = () => {\n    setRegisters(\n      registers.map((register) =>\n        register.name === r2 ? { ...register, value: r1Val } : register\n      )\n    );\n  };\n\n  const swap = () => {\n    setRegisters(\n      registers.map((register) =>\n        register.name === r1\n          ? { ...register, value: r2Val }\n          : register.name === r2\n          ? { ...register, value: r1Val }\n          : register\n      )\n    );\n  };\n\n  const add = () => {\n    setRegisters(\n      registers.map((register) =>\n        register.name === r1\n          ? {\n              ...register,\n              value: Number(parseInt(r1Val, 2) + parseInt(r2Val, 2)).toString(\n                2\n              ),\n            }\n          : register\n      )\n    );\n  };\n\n  const sub = () => {\n    setRegisters(\n      registers.map((register) =>\n        register.name === r1\n          ? {\n              ...register,\n              value: Number(parseInt(r1Val, 2) - parseInt(r2Val, 2)).toString(\n                2\n              ),\n            }\n          : register\n      )\n    );\n  };\n\n  const COMMANDS = [\n    {\n      name: \"MOV\",\n      func: mov,\n    },\n    {\n      name: \"SWAP\",\n      func: swap,\n    },\n    {\n      name: \"ADD\",\n      func: add,\n    },\n    { name: \"SUB\", func: sub },\n  ];\n\n  useEffect(() => {\n    setR1Val(registers.find(({ name }) => name === r1).value);\n    setR2Val(registers.find(({ name }) => name === r2).value);\n  }, [r1, r2, registers]);\n\n  const RegistersList = () => (\n    <div className=\"p-12 flex flex-col md:w-1/3\">\n      {registers.map(({ name, value }) => (\n        <Register\n          key={name}\n          name={name}\n          value={value}\n          onChange={handleRegisterChange}\n        />\n      ))}\n    </div>\n  );\n\n  const RegistersSwitch = () => (\n    <div className=\"flex md:w-1/3 p-12 items-center justify-center space-x-8 border-l border-r border-blue-300\">\n      <div className=\"flex-col\">\n        {\n          <RegistersSelect\n            registers={registers}\n            selected={r1}\n            setter={(event) => setR1(event.target.getAttribute(\"name\"))}\n          />\n        }\n      </div>\n      <div className=\"flex-col\">\n        <RegistersSelect\n          registers={registers}\n          selected={r2}\n          setter={(event) => setR2(event.target.getAttribute(\"name\"))}\n        />\n      </div>\n    </div>\n  );\n\n  const Operations = () => (\n    <div className=\"w-1/3 flex flex-col items-center justify-evenly\">\n      {r1 === r2 ? (\n        <span className=\"text-red-600\">Proszę wybrać różne rejestry</span>\n      ) : (\n        COMMANDS.map(({ name, func }) => (\n          <OperationButton\n            key={`command-${name}`}\n            name={name}\n            onClick={() => func()}\n          />\n        ))\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center\">\n      <div className=\"w-full flex-col items-center flex\">\n        <main className=\"max-w-screen-md w-full flex flex-col flex-1 bg-gray-300 border-l border-r border-b border-blue-300\">\n          <header className=\"flex flex-1 w-full justify-center items-center p-6 bg-blue-300 text-white uppercase\">\n            <h1 className=\"text-3xl font-bold\">\n              Emulator procesora Intel 8086\n            </h1>\n          </header>\n          <div className=\"flex\">\n            <RegistersList />\n            <RegistersSwitch />\n            <Operations />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}